{"version":3,"file":"static/js/91.a1117956.chunk.js","mappings":"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","sources":["Components/user/ChatOnline/ChatOnline.jsx","Components/user/conversations/Conversation.jsx","Components/user/Message/Message.jsx","Components/user/Messenger/Messenger.jsx"],"sourcesContent":["import React from 'react'\r\nimport \"./ChatOnline.css\"\r\nimport axios from \"axios\"\r\nimport { useSelector } from \"react-redux\"\r\nimport SentimentDissatisfiedIcon from '@mui/icons-material/SentimentDissatisfied';\r\n\r\nfunction ChatOnline({ onlineUsers, currentId, setCurrentChat }) {\r\n\r\n  const { user } = useSelector((state) => state.user);\r\n  const handleClick = async (user) => {\r\n    try {\r\n      const { data } = await axios.get(`/api/v1/conversation/find/${currentId}/${user._id}`)\r\n      setCurrentChat(data)\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"chatOnline\">\r\n        <p className=\"text-on-online\">Online Users</p>\r\n        {\r\n          onlineUsers && onlineUsers.length > 0 ? (\r\n            onlineUsers?.map((o) => (\r\n              <div className=\"chatOnlineFriend\" key={o._id} onClick={() => handleClick(o)}>\r\n                <div className=\"chatOnlineImgContainer\">\r\n                  <img\r\n                    className=\"chatOnlineImg\"\r\n                    src={o?.avatar.url}\r\n                    alt=\"online friend avatar\"\r\n                  />\r\n                  <div className=\"chatOnlineBadge\"></div>\r\n                </div>\r\n                <span className=\"chatOnlineName\">{o?.name}</span>\r\n              </div>\r\n            ))\r\n          ) : (\r\n            <p style={{ color: \"rgb(118, 118, 124)\" }}><SentimentDissatisfiedIcon /> <span className='no-one-online'>Oops.. everyone is having a break time!</span> </p>\r\n          )\r\n        }\r\n      </div>\r\n      <div>\r\n        <div className=\"chatOnline\">\r\n          <p className=\"text-on-online mt-2\">Friends list</p>\r\n          {\r\n            user && user.following.length > 0 ? user.following.map((follow) => ((\r\n              <div className=\"chatOnlineFriend\" onClick={() => handleClick(follow)}>\r\n                <div className=\"chatOnlineImgContainer\">\r\n                  <img\r\n                    className=\"chatOnlineImg\"\r\n                    src={follow.avatar.url}\r\n                    alt=\"\"\r\n                  />\r\n                </div>\r\n                <span className=\"chatOnlineName\">{follow.name}</span>\r\n              </div>\r\n            ))\r\n            ) : (\r\n              <p style={{ margin: \"2vmax\" }}> You're not following anyone</p>\r\n            )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ChatOnline","import React, { useState, useEffect } from 'react'\r\nimport \"./Conversation.css\"\r\nimport axios from 'axios'\r\n\r\nfunction Conversation({ conversation, currentUser }) {\r\n\r\n  const [user, setUser] = useState(null)\r\n\r\n  useEffect(() => {\r\n    const friendId = conversation.members.find(m => m !== currentUser._id)\r\n    const getUser = async () => {\r\n      try {\r\n        const { data } = await axios(`/api/v1/user/${friendId}`)\r\n        setUser(data.user)\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n    getUser()\r\n  }, [currentUser, conversation])\r\n\r\n  return (\r\n    <div className=\"conversation\">\r\n      <img className=\"conversationImg\" src={user && user.avatar.url} alt=\"\" />\r\n      <span className=\"conversationName\">{user && user.name}</span>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Conversation","import React from 'react'\r\nimport \"./Message.css\"\r\nimport { format } from \"timeago.js\"\r\n\r\nfunction Message({ message, own }) {\r\n\r\n  return (\r\n    <div className={own ? \"message own\" : \"message\"}>\r\n      <div className=\"messageTop\">\r\n        <img className=\"messageImg\" src={message?.sender.avatar.url} alt=\"\" />\r\n        <p className=\"messageText\">{message.text}</p>\r\n      </div>\r\n      <div className=\"messageBottom\">{format(message.createdAt)}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Message","import React, { useState, useEffect, useRef } from 'react'\r\nimport ChatOnline from '../ChatOnline/ChatOnline'\r\nimport Conversation from '../conversations/Conversation'\r\nimport Message from '../Message/Message'\r\nimport { useSelector } from \"react-redux\"\r\nimport axios from \"axios\"\r\nimport { io } from \"socket.io-client\"\r\nimport \"./Messenger.css\"\r\n\r\nfunction Messenger() {\r\n    const [converstions, setConverstions] = useState([])\r\n    const [currentChat, setCurrentChat] = useState(null)\r\n    const [messages, setMessages] = useState([])\r\n    const [newMessage, setNewMessage] = useState(\"\")\r\n    const [arrivalMessage, setArrivalMessage] = useState(null)\r\n    const [onlineUsers, setOnlineUsers] = useState(null)\r\n    const socket = useRef(io(\"https://trvalista.online\"))\r\n    \r\n    \r\n    const scrollRef = useRef()\r\n    const { user } = useSelector((state) => state.user);\r\n    useEffect(() => {\r\n        socket.current = io(\"https://travalista.online\");\r\n        \r\n        socket.current.on(\"getMessage\", (data) => {\r\n            setArrivalMessage({\r\n                sender: data.sender,\r\n                text: data.text,\r\n                createdAt: Date.now()\r\n            });\r\n        });\r\n        return () => {\r\n            socket.current.close()\r\n        }\r\n    }, [socket]);\r\n\r\n    useEffect(() => {\r\n        arrivalMessage &&\r\n            currentChat?.members.includes(arrivalMessage.sender._id) &&\r\n            setMessages((prev) => [...prev, arrivalMessage])\r\n    }, [arrivalMessage, currentChat])\r\n\r\n    useEffect(() => {\r\n        socket.current.emit(\"addUser\", user._id)\r\n        socket.current.on(\"getUsers\", (users) => {\r\n            users = JSON.parse(users)\r\n            setOnlineUsers(\r\n                user.following.filter((f) => users.some((u) => u.userId === f._id)))\r\n        })\r\n    }, [user.following, user._id])\r\n\r\n    useEffect(() => {\r\n        const getConversations = async () => {\r\n            try {\r\n                const { data } = await axios.get(`/api/v1/conversation/${user._id}`)\r\n                setConverstions(data)\r\n            } catch (err) {\r\n                console.log(err);\r\n            }\r\n        }\r\n        getConversations()\r\n    }, [user._id])\r\n\r\n    useEffect(() => {\r\n        const getMessages = async () => {\r\n            try {\r\n                const { data } = await axios.get(`/api/v1/message/${currentChat?._id}`)\r\n                setMessages(data)\r\n            } catch (err) {\r\n                console.log(err);\r\n            }\r\n        }\r\n        getMessages()\r\n    }, [currentChat])\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const message = {\r\n            sender: user,\r\n            text: newMessage,\r\n            conversationId: currentChat._id\r\n        }\r\n\r\n        const receiverId = currentChat.members.find((member) => member !== user._id);\r\n        socket.current.emit(\"sendMessage\", {\r\n            senderId: {\r\n                avatar: user.avatar,\r\n                _id: user._id\r\n            },\r\n            receiverId,\r\n            text: newMessage\r\n        })\r\n\r\n        try {\r\n            const { data } = await axios.post(`/api/v1/message`, message)\r\n            setMessages([...messages, data])\r\n            setNewMessage(\"\")\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        scrollRef.current?.scrollIntoView({ behavior: \"smooth\" })\r\n    }, [messages])\r\n\r\n\r\n    return (\r\n        <div className=\"body-messager pt-2 \">\r\n            <div className='messenger  container'>\r\n                <div className=\"chatMenu d-none d-sm-block col-2\">\r\n                    <div className=\"chatMenuWrapper\">\r\n                        <h5>Recent Chats</h5>\r\n                        {converstions.map((c) => (\r\n                            <div key={c._id} onClick={() => setCurrentChat(c)}>\r\n                                <Conversation conversation={c} currentUser={user} />\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n                <div className=\"chatBox col-sm-8\">\r\n                    <div className=\"chatBoxWrapper\">\r\n                        {currentChat ?\r\n                            <>\r\n                                <div className=\"chatBoxTop\">\r\n                                    {messages.map(m => (\r\n                                        <div key={m._id} ref={scrollRef}>\r\n                                            < Message message={m} own={m.sender._id === user._id} />\r\n                                        </div>\r\n                                    ))\r\n                                    }\r\n                                </div>\r\n                                <div className=\"chatBoxBottom\">\r\n                                    <input\r\n                                    type=\"text\"\r\n                                        className=\"chatMessageInput\"\r\n                                        placeholder='write something...'\r\n                                        onChange={(e) => setNewMessage(e.target.value)}\r\n                                        value={newMessage}\r\n                                        onKeyPress={(e) => { e.key === \"Enter\" && handleSubmit(e);\r\n                                    }}\r\n                                    />\r\n                                   \r\n                     {newMessage.length < 1 ? (\r\n                        <button className=\"chatSubmitButton\">Send</button>\r\n                        ) : (\r\n                                    <button className=\"chatSubmitButton\" onClick={handleSubmit}>\r\n                                        Send\r\n                                    </button>\r\n                                     )}\r\n                                </div>\r\n                            </>\r\n                            : (\r\n                                <>\r\n                                    <p className='noConversationText'>Open a conversation to start a chat.</p>\r\n                                </>\r\n                            )\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className=\"chatOnline col-4 col-sm-2\">\r\n                    <div className=\"chatOnlineWrapper\">\r\n                        <ChatOnline\r\n                            onlineUsers={onlineUsers && onlineUsers}\r\n                            currentId={user._id}\r\n                            setCurrentChat={setCurrentChat}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Messenger"],"names":["onlineUsers","currentId","setCurrentChat","user","useSelector","state","handleClick","axios","_id","data","console","log","className","length","map","o","onClick","src","avatar","url","alt","name","style","color","SentimentDissatisfied","following","follow","margin","conversation","currentUser","useState","setUser","useEffect","friendId","members","find","m","getUser","message","own","sender","text","format","createdAt","converstions","setConverstions","currentChat","messages","setMessages","newMessage","setNewMessage","arrivalMessage","setArrivalMessage","setOnlineUsers","socket","useRef","io","scrollRef","current","on","Date","now","close","includes","prev","emit","users","JSON","parse","filter","f","some","u","userId","getConversations","getMessages","handleSubmit","e","preventDefault","conversationId","receiverId","member","senderId","scrollIntoView","behavior","c","ref","type","placeholder","onChange","target","value","onKeyPress","key"],"sourceRoot":""}